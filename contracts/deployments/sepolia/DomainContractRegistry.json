{
  "address": "0x858C5EC28bbEb9EdF8d9060f055aeCd869Ec8671",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DRC_CoolOffPeriodNotOver",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "domain",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dappRegistry",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "DappRegistryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "domain",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dappRegistry",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "TransitionRecorded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "fulfillRecordTransiton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_domain",
          "type": "string"
        }
      ],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_domain",
          "type": "string"
        }
      ],
      "name": "getDappRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_domain",
          "type": "string"
        }
      ],
      "name": "getRecordTransition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_domain",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_dappRegistry",
          "type": "address"
        }
      ],
      "name": "setDappRegistry",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a533b351639fb9ac98995dda844bf3b57779f02af41d7ade8bf5363a89c34cd",
  "receipt": {
    "to": null,
    "from": "0xE06D49a5F530b2144CecF6eCaF954Db5bBfa579E",
    "contractAddress": "0x858C5EC28bbEb9EdF8d9060f055aeCd869Ec8671",
    "transactionIndex": 4,
    "gasUsed": "2372254",
    "logsBloom": "0x
    "blockHash": "0x9522e1f1435d5db38c3ec0dd56f42f30ca45c6893f3c6bea39e49c7de4e6fe21",
    "transactionHash": "0x6a533b351639fb9ac98995dda844bf3b57779f02af41d7ade8bf5363a89c34cd",
    "logs": [],
    "blockNumber": 3577564,
    "cumulativeGasUsed": "3475374",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "133130b1c6c4eac538b7d5691c0785f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DRC_CoolOffPeriodNotOver\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dappRegistry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"DappRegistryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dappRegistry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"TransitionRecorded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"fulfillRecordTransiton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"getDappRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"getRecordTransition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_dappRegistry\",\"type\":\"address\"}],\"name\":\"setDappRegistry\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The Domain Contract Registry contract is used to register the dapp registry for a domain.\",\"kind\":\"dev\",\"methods\":{\"fulfill(bytes32,bool)\":{\"details\":\"Callback function for Chainlink request to register or update the dapp registry.\",\"params\":{\"_requestId\":\"The request id of the Chainlink request\",\"result\":\"The result of the Chainlink request\"}},\"fulfillRecordTransiton(bytes32,bool)\":{\"details\":\"Callback function for Chainlink request to record the transition.\",\"params\":{\"_requestId\":\"The request id of the Chainlink request\",\"result\":\"The result of the Chainlink request\"}},\"setDappRegistry(string,address)\":{\"details\":\"Set the dapp registry for a domain.\",\"params\":{\"_dappRegistry\":\"The address of the dapp registry\",\"_domain\":\"The domain name\"},\"returns\":{\"_0\":\"requestId The request id of the Chainlink request\"}}},\"title\":\"Domain Contract Registry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fulfill(bytes32,bool)\":{\"notice\":\"If the response by the chainlink Oracle is true, register or update the dapp registry.\"},\"fulfillRecordTransiton(bytes32,bool)\":{\"notice\":\"If the response by the chainlink Oracle is true, record the transition.\"},\"setDappRegistry(string,address)\":{\"notice\":\"If a domain is not registered add the dapp Registry.  If a domain is already registered, and admin wants to update the dapp registry,  update the registry.  If a domain is already registered, and new owner wants to update the dapp registry,  record transition.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DomainContractRegistry.sol\":\"DomainContractRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/DomainContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nerror DRC_CoolOffPeriodNotOver();\\r\\n\\r\\n/**\\r\\n * @title Domain Contract Registry\\r\\n * @dev The Domain Contract Registry contract is used to register the dapp registry for a domain.\\r\\n */\\r\\ncontract DomainContractRegistry is ChainlinkClient{\\r\\n\\r\\n  using Chainlink for Chainlink.Request;\\r\\n  \\r\\n  struct RegistryInfo {\\r\\n    address dappRegistry;\\r\\n    address admin;\\r\\n  }\\r\\n\\r\\n  struct RecordTransition {\\r\\n    address dappRegistry;\\r\\n    uint256 timestamp;\\r\\n  }\\r\\n\\r\\n  struct Domain {\\r\\n    string domain;\\r\\n    address dappRegistry;\\r\\n    address admin;\\r\\n  }\\r\\n  \\r\\n  bytes32 private jobId;\\r\\n  uint256 private fee;\\r\\n  // Mapping of Chainlink request id to Domain struct\\r\\n  mapping(bytes32 => Domain) private requestToDomainMap;\\r\\n  // Mapping of domain to RegistryInfo struct\\r\\n  mapping(string => RegistryInfo) private registryMap;\\r\\n  // Mapping of domain to RecordTransition struct\\r\\n  mapping(string => RecordTransition) private recordTransitionMap;\\r\\n\\r\\n  event DappRegistryAdded(string indexed domain, address indexed dappRegistry, address indexed admin);\\r\\n  event TransitionRecorded(string indexed domain, address indexed dappRegistry, address indexed admin);\\r\\n\\r\\n  constructor() {\\r\\n    // Set the address for the LINK token for the network\\r\\n    setChainlinkToken(0x779877A7B0D9E8603169DdbD7836e478b4624789);\\r\\n    // Set the address of the oracle\\r\\n    setChainlinkOracle(0xbF3f7C8897c93A8D440bA952a035E9e03af742bF);\\r\\n    // Set the job id of the external adapter\\r\\n    jobId = \\\"2edbd7bb1fa54041b9fca33bb9400978\\\";\\r\\n    fee = (1 * LINK_DIVISIBILITY) / 10;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Set the dapp registry for a domain.\\r\\n   * @notice If a domain is not registered add the dapp Registry. \\r\\n   * If a domain is already registered, and admin wants to update the dapp registry, \\r\\n   * update the registry. \\r\\n   * If a domain is already registered, and new owner wants to update the dapp registry, \\r\\n   * record transition.\\r\\n   * @param _domain The domain name\\r\\n   * @param _dappRegistry The address of the dapp registry\\r\\n   * @return requestId The request id of the Chainlink request\\r\\n  */\\r\\n  function setDappRegistry(string memory _domain, address _dappRegistry) \\r\\n  external returns(bytes32){\\r\\n    if(registryMap[_domain].dappRegistry == address(0) || registryMap[_domain].admin == msg.sender) {\\r\\n      return _checkForDomain(_domain, _dappRegistry, this.fulfill.selector);\\r\\n    }else {\\r\\n      return recordTransition(_domain, _dappRegistry);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Check if the contract Addresses are valid with the Dapp Registry of domain.\\r\\n   * @notice Send a Chainlink request to external adapter to check if the contract Addresses \\r\\n   * are valid with the Dapp Registry of domain and send the response to callback function.\\r\\n   * @param _domain The domain name\\r\\n   * @param _dappRegistry The address of the dapp registry\\r\\n   * @param selector The selector of the callback function to be called\\r\\n   */\\r\\n  function _checkForDomain(string memory _domain, address _dappRegistry, bytes4 selector) \\r\\n  internal returns(bytes32) {\\r\\n    Chainlink.Request memory req = buildChainlinkRequest(\\r\\n      jobId,\\r\\n      address(this),\\r\\n      selector\\r\\n    );\\r\\n\\r\\n    // Set the domain and dapp registry address as parameters to the request to be sent to external adapter\\r\\n    req.add(\\\"domain\\\",_domain);\\r\\n    req.add(\\\"drcAddress\\\", Strings.toHexString(uint256(uint160(_dappRegistry)), 20));\\r\\n\\r\\n    bytes32 requestId = sendChainlinkRequest(req, fee);\\r\\n\\r\\n    // Map the Chainlink requestId to Domain struct to be used in callback function\\r\\n    requestToDomainMap[requestId].domain = _domain;\\r\\n    requestToDomainMap[requestId].dappRegistry = _dappRegistry;\\r\\n    requestToDomainMap[requestId].admin = msg.sender;\\r\\n    return requestId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Callback function for Chainlink request to register or update the dapp registry.\\r\\n   * @notice If the response by the chainlink Oracle is true, register or update the dapp registry.\\r\\n   * @param _requestId The request id of the Chainlink request\\r\\n   * @param result The result of the Chainlink request\\r\\n   */\\r\\n  function fulfill(bytes32 _requestId, bool result) \\r\\n  public recordChainlinkFulfillment(_requestId) {\\r\\n    if(result) {\\r\\n      string memory domain = requestToDomainMap[_requestId].domain;\\r\\n      registryMap[domain].dappRegistry = requestToDomainMap[_requestId].dappRegistry;\\r\\n      registryMap[domain].admin = requestToDomainMap[_requestId].admin;\\r\\n\\r\\n      emit DappRegistryAdded(domain, requestToDomainMap[_requestId].dappRegistry, requestToDomainMap[_requestId].admin);\\r\\n    }\\r\\n    delete requestToDomainMap[_requestId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Callback function for Chainlink request to record the transition.\\r\\n   * @notice If the response by the chainlink Oracle is true, record the transition.\\r\\n   * @param _requestId The request id of the Chainlink request\\r\\n   * @param result The result of the Chainlink request\\r\\n   */\\r\\n  function fulfillRecordTransiton(bytes32 _requestId, bool result) \\r\\n  public recordChainlinkFulfillment(_requestId) {\\r\\n    if(result) {\\r\\n      string memory domain = requestToDomainMap[_requestId].domain;\\r\\n      recordTransitionMap[domain].dappRegistry = requestToDomainMap[_requestId].dappRegistry;\\r\\n      recordTransitionMap[domain].timestamp = block.timestamp ;\\r\\n\\r\\n      emit TransitionRecorded(domain, requestToDomainMap[_requestId].dappRegistry, requestToDomainMap[_requestId].admin);\\r\\n    }\\r\\n    delete requestToDomainMap[_requestId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Record the transition.\\r\\n   * @notice If the transition is already recorded, check if the cool off period is over. \\r\\n   * If the cool off period is over, check if the contract Addresses are valid with the Dapp \\r\\n   * registry of domain and update the registry.\\r\\n   * If the transition is not recorded, check if the contract Addresses are valid with the \\r\\n   * Dapp Registry of domain and record the transition.\\r\\n   * @param _domain The domain name\\r\\n   * @param _dappRegistry The address of the dapp registry\\r\\n   */\\r\\n  function recordTransition(string memory _domain, address _dappRegistry) internal returns(bytes32) {\\r\\n    if(recordTransitionMap[_domain].dappRegistry == _dappRegistry) {\\r\\n      if(block.timestamp > recordTransitionMap[_domain].timestamp + 7 days) {\\r\\n        return _checkForDomain(_domain, _dappRegistry, this.fulfill.selector);\\r\\n      }\\r\\n      else {\\r\\n        revert DRC_CoolOffPeriodNotOver();\\r\\n      }\\r\\n    }  \\r\\n    else\\r\\n      return _checkForDomain(_domain, _dappRegistry, this.fulfillRecordTransiton.selector);\\r\\n  }\\r\\n\\r\\n  function getDappRegistry(string memory _domain) public view returns(address) {\\r\\n    return registryMap[_domain].dappRegistry;\\r\\n  }\\r\\n\\r\\n  function getAdmin(string memory _domain) public view returns(address) {\\r\\n    return registryMap[_domain].admin;\\r\\n  }\\r\\n\\r\\n  function getRecordTransition(string memory _domain) public view returns(address, uint256) {\\r\\n    return (recordTransitionMap[_domain].dappRegistry, recordTransitionMap[_domain].timestamp);\\r\\n  }\\r\\n}\",\"keccak256\":\"0xe02361eb7f166af0d4ee33a8a87f7aaf004215895b059cd529afabd094fc1140\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405260016004553480156200001657600080fd5b506200003c73779877a7b0d9e8603169ddbd7836e478b4624789620000b960201b60201c565b6200006173bf3f7c8897c93a8d440ba952a035e9e03af742bf620000fd60201b60201c565b7f3265646264376262316661353430343162396663613333626239343030393738600681905550600a670de0b6b3a76400006001620000a191906200017a565b620000ad9190620001f4565b6007819055506200022c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620001878262000141565b9150620001948362000141565b9250828202620001a48162000141565b91508282048414831517620001be57620001bd6200014b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000620002018262000141565b91506200020e8362000141565b925082620002215762000220620001c5565b5b828204905092915050565b6127e9806200023c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063423016f9146100675780634a0a23e4146100975780635c666026146100b3578063c6182407146100e3578063e6d218d914610114578063fd68990a14610144575b600080fd5b610081600480360381019061007c9190611ae6565b610160565b60405161008e9190611b70565b60405180910390f35b6100b160048036038101906100ac9190611bf9565b6101ab565b005b6100cd60048036038101906100c89190611c65565b61056c565b6040516100da9190611cd0565b60405180910390f35b6100fd60048036038101906100f89190611ae6565b610686565b60405161010b929190611d04565b60405180910390f35b61012e60048036038101906101299190611ae6565b6106f6565b60405161013b9190611b70565b60405180910390f35b61015e60048036038101906101599190611bf9565b610741565b005b60006009826040516101729190611d9e565b908152602001604051809103902060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024490611e38565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a281156104f35760006008600085815260200190815260200160002060000180546102d990611e87565b80601f016020809104026020016040519081016040528092919081815260200182805461030590611e87565b80156103525780601f1061032757610100808354040283529160200191610352565b820191906000526020600020905b81548152906001019060200180831161033557829003601f168201915b505050505090506008600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a826040516103a09190611d9e565b908152602001604051809103902060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600a826040516104009190611d9e565b9081526020016040518091039020600101819055506008600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166008600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516104bd9190611d9e565b60405180910390207f84240358700ae9004ae0fee317e4909af848db92a33baf37f806d3ed077a2fa060405160405180910390a4505b600860008481526020019081526020016000206000808201600061051791906118a8565b6001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166009846040516105959190611d9e565b908152602001604051809103902060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061065557503373ffffffffffffffffffffffffffffffffffffffff1660098460405161060b9190611d9e565b908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156106735761066c838363fd68990a60e01b610b72565b9050610680565b61067d8383610d22565b90505b92915050565b600080600a836040516106999190611d9e565b908152602001604051809103902060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a846040516106db9190611d9e565b90815260200160405180910390206001015491509150915091565b60006009826040516107089190611d9e565b908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da90611e38565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a28115610af957600060086000858152602001908152602001600020600001805461086f90611e87565b80601f016020809104026020016040519081016040528092919081815260200182805461089b90611e87565b80156108e85780601f106108bd576101008083540402835291602001916108e8565b820191906000526020600020905b8154815290600101906020018083116108cb57829003601f168201915b505050505090506008600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166009826040516109369190611d9e565b908152602001604051809103902060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506008600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166009826040516109cc9190611d9e565b908152602001604051809103902060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506008600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166008600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610ac39190611d9e565b60405180910390207f1627d4dea7e3bf39ca9fcea57d0a5c17494a0d70918f9c47b96aa70da71cd0a460405160405180910390a4505b6008600084815260200190815260200160002060008082016000610b1d91906118a8565b6001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050505050565b600080610b826006543085610e35565b9050610bce6040518060400160405280600681526020017f646f6d61696e00000000000000000000000000000000000000000000000000008152508683610e669092919063ffffffff16565b610c386040518060400160405280600a81526020017f6472634164647265737300000000000000000000000000000000000000000000815250610c288673ffffffffffffffffffffffffffffffffffffffff166014610e99565b83610e669092919063ffffffff16565b6000610c46826007546110d5565b905085600860008381526020019081526020016000206000019081610c6b9190612064565b50846008600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336008600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080925050509392505050565b60008173ffffffffffffffffffffffffffffffffffffffff16600a84604051610d4b9190611d9e565b908152602001604051809103902060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e1a5762093a80600a84604051610dac9190611d9e565b908152602001604051809103902060010154610dc89190612165565b421115610de857610de1838363fd68990a60e01b610b72565b9050610e2f565b6040517f56a1446c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e2c8383634a0a23e460e01b610b72565b90505b92915050565b610e3d6118e8565b610e456118e8565b610e5c8585858461110c909392919063ffffffff16565b9150509392505050565b610e7d8284608001516111bc90919063ffffffff16565b610e948184608001516111bc90919063ffffffff16565b505050565b606060006002836002610eac9190612199565b610eb69190612165565b67ffffffffffffffff811115610ecf57610ece6119bb565b5b6040519080825280601f01601f191660200182016040528015610f015781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610f3957610f386121db565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610f9d57610f9c6121db565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610fdd9190612199565b610fe79190612165565b90505b6001811115611087577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611029576110286121db565b5b1a60f81b8282815181106110405761103f6121db565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806110809061220a565b9050610fea565b50600084146110cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c29061227f565b60405180910390fd5b8091505092915050565b6000611104600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846111e1565b905092915050565b6111146118e8565b61112485608001516101006112ad565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b6111c98260038351611317565b6111dc818361149c90919063ffffffff16565b505050565b60008060045490506001816111f69190612165565b6004819055506000634042994660e01b60008087600001513089604001518760018c608001516000015160405160240161123798979695949392919061232f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506112a2868386846114be565b925050509392505050565b6112b5611955565b60006020836112c491906123e3565b146112f0576020826112d691906123e3565b60206112e29190612414565b826112ed9190612165565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff161161134e576113488160058460ff16901b60ff16178461165390919063ffffffff16565b50611497565b60ff8167ffffffffffffffff16116113a45761137d601860058460ff16901b178461165390919063ffffffff16565b5061139e8167ffffffffffffffff166001856116739092919063ffffffff16565b50611496565b61ffff8167ffffffffffffffff16116113fb576113d4601960058460ff16901b178461165390919063ffffffff16565b506113f58167ffffffffffffffff166002856116739092919063ffffffff16565b50611495565b63ffffffff8167ffffffffffffffff16116114545761142d601a60058460ff16901b178461165390919063ffffffff16565b5061144e8167ffffffffffffffff166004856116739092919063ffffffff16565b50611494565b611471601b60058460ff16901b178461165390919063ffffffff16565b506114928167ffffffffffffffff166008856116739092919063ffffffff16565b505b5b5b5b505050565b6114a4611955565b6114b683846000015151848551611695565b905092915050565b600030846040516020016114d39291906124f7565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b81526004016115c993929190612523565b6020604051808303816000875af11580156115e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160c9190612576565b61164b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164290612615565b60405180910390fd5b949350505050565b61165b611955565b61166b8384600001515184611784565b905092915050565b61167b611955565b61168c8485600001515185856117da565b90509392505050565b61169d611955565b82518211156116ab57600080fd5b846020015182856116bc9190612165565b11156116f1576116f08560026116e1886020015188876116dc9190612165565b611868565b6116eb9190612199565b611884565b5b6000808651805187602083010193508088870111156117105787860182525b60208701925050505b6020841061175757805182526020826117329190612165565b91506020816117419190612165565b90506020846117509190612414565b9350611719565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b61178c611955565b836020015183106117b2576117b184600286602001516117ac9190612199565b611884565b5b835180516020858301018481538186036117cd576001820183525b5050508390509392505050565b6117e2611955565b846020015184836117f39190612165565b111561181b5761181a856002868561180b9190612165565b6118159190612199565b611884565b5b600060018361010061182d9190612768565b6118379190612414565b9050855183868201018583198251161781528151858801111561185a5784870182525b505085915050949350505050565b60008183111561187a5782905061187e565b8190505b92915050565b60008260000151905061189783836112ad565b506118a2838261149c565b50505050565b5080546118b490611e87565b6000825580601f106118c657506118e5565b601f0160209004906000526020600020908101906118e4919061196f565b5b50565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161194f611955565b81525090565b604051806040016040528060608152602001600081525090565b5b80821115611988576000816000905550600101611970565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119f3826119aa565b810181811067ffffffffffffffff82111715611a1257611a116119bb565b5b80604052505050565b6000611a2561198c565b9050611a3182826119ea565b919050565b600067ffffffffffffffff821115611a5157611a506119bb565b5b611a5a826119aa565b9050602081019050919050565b82818337600083830152505050565b6000611a89611a8484611a36565b611a1b565b905082815260208101848484011115611aa557611aa46119a5565b5b611ab0848285611a67565b509392505050565b600082601f830112611acd57611acc6119a0565b5b8135611add848260208601611a76565b91505092915050565b600060208284031215611afc57611afb611996565b5b600082013567ffffffffffffffff811115611b1a57611b1961199b565b5b611b2684828501611ab8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b5a82611b2f565b9050919050565b611b6a81611b4f565b82525050565b6000602082019050611b856000830184611b61565b92915050565b6000819050919050565b611b9e81611b8b565b8114611ba957600080fd5b50565b600081359050611bbb81611b95565b92915050565b60008115159050919050565b611bd681611bc1565b8114611be157600080fd5b50565b600081359050611bf381611bcd565b92915050565b60008060408385031215611c1057611c0f611996565b5b6000611c1e85828601611bac565b9250506020611c2f85828601611be4565b9150509250929050565b611c4281611b4f565b8114611c4d57600080fd5b50565b600081359050611c5f81611c39565b92915050565b60008060408385031215611c7c57611c7b611996565b5b600083013567ffffffffffffffff811115611c9a57611c9961199b565b5b611ca685828601611ab8565b9250506020611cb785828601611c50565b9150509250929050565b611cca81611b8b565b82525050565b6000602082019050611ce56000830184611cc1565b92915050565b6000819050919050565b611cfe81611ceb565b82525050565b6000604082019050611d196000830185611b61565b611d266020830184611cf5565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015611d61578082015181840152602081019050611d46565b60008484015250505050565b6000611d7882611d2d565b611d828185611d38565b9350611d92818560208601611d43565b80840191505092915050565b6000611daa8284611d6d565b915081905092915050565b600082825260208201905092915050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b6000611e22602883611db5565b9150611e2d82611dc6565b604082019050919050565b60006020820190508181036000830152611e5181611e15565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e9f57607f821691505b602082108103611eb257611eb1611e58565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611f1a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611edd565b611f248683611edd565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611f61611f5c611f5784611ceb565b611f3c565b611ceb565b9050919050565b6000819050919050565b611f7b83611f46565b611f8f611f8782611f68565b848454611eea565b825550505050565b600090565b611fa4611f97565b611faf818484611f72565b505050565b5b81811015611fd357611fc8600082611f9c565b600181019050611fb5565b5050565b601f82111561201857611fe981611eb8565b611ff284611ecd565b81016020851015612001578190505b61201561200d85611ecd565b830182611fb4565b50505b505050565b600082821c905092915050565b600061203b6000198460080261201d565b1980831691505092915050565b6000612054838361202a565b9150826002028217905092915050565b61206d82611d2d565b67ffffffffffffffff811115612086576120856119bb565b5b6120908254611e87565b61209b828285611fd7565b600060209050601f8311600181146120ce57600084156120bc578287015190505b6120c68582612048565b86555061212e565b601f1984166120dc86611eb8565b60005b82811015612104578489015182556001820191506020850194506020810190506120df565b86831015612121578489015161211d601f89168261202a565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061217082611ceb565b915061217b83611ceb565b925082820190508082111561219357612192612136565b5b92915050565b60006121a482611ceb565b91506121af83611ceb565b92508282026121bd81611ceb565b915082820484148315176121d4576121d3612136565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061221582611ceb565b91506000820361222857612227612136565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612269602083611db5565b915061227482612233565b602082019050919050565b600060208201905081810360008301526122988161225c565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6122d48161229f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612301826122da565b61230b81856122e5565b935061231b818560208601611d43565b612324816119aa565b840191505092915050565b600061010082019050612345600083018b611b61565b612352602083018a611cf5565b61235f6040830189611cc1565b61236c6060830188611b61565b61237960808301876122cb565b61238660a0830186611cf5565b61239360c0830185611cf5565b81810360e08301526123a581846122f6565b90509998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006123ee82611ceb565b91506123f983611ceb565b925082612409576124086123b4565b5b828206905092915050565b600061241f82611ceb565b915061242a83611ceb565b925082820390508181111561244257612441612136565b5b92915050565b600061246361245e61245984611b2f565b611f3c565b611b2f565b9050919050565b600061247582612448565b9050919050565b60006124878261246a565b9050919050565b60008160601b9050919050565b60006124a68261248e565b9050919050565b60006124b88261249b565b9050919050565b6124d06124cb8261247c565b6124ad565b82525050565b6000819050919050565b6124f16124ec82611ceb565b6124d6565b82525050565b600061250382856124bf565b60148201915061251382846124e0565b6020820191508190509392505050565b60006060820190506125386000830186611b61565b6125456020830185611cf5565b818103604083015261255781846122f6565b9050949350505050565b60008151905061257081611bcd565b92915050565b60006020828403121561258c5761258b611996565b5b600061259a84828501612561565b91505092915050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b60006125ff602383611db5565b915061260a826125a3565b604082019050919050565b6000602082019050818103600083015261262e816125f2565b9050919050565b60008160011c9050919050565b6000808291508390505b600185111561268c5780860481111561266857612667612136565b5b60018516156126775780820291505b808102905061268585612635565b945061264c565b94509492505050565b6000826126a55760019050612761565b816126b35760009050612761565b81600181146126c957600281146126d357612702565b6001915050612761565b60ff8411156126e5576126e4612136565b5b8360020a9150848211156126fc576126fb612136565b5b50612761565b5060208310610133831016604e8410600b84101617156127375782820a90508381111561273257612731612136565b5b612761565b6127448484846001612642565b9250905081840481111561275b5761275a612136565b5b81810290505b9392505050565b600061277382611ceb565b915061277e83611ceb565b92506127ab7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612695565b90509291505056fea2646970667358221220f48561e5f7e3cacf88e7ea9639aa977d1ec4ec3ab51af555a90133fbb85f084c64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063423016f9146100675780634a0a23e4146100975780635c666026146100b3578063c6182407146100e3578063e6d218d914610114578063fd68990a14610144575b600080fd5b610081600480360381019061007c9190611ae6565b610160565b60405161008e9190611b70565b60405180910390f35b6100b160048036038101906100ac9190611bf9565b6101ab565b005b6100cd60048036038101906100c89190611c65565b61056c565b6040516100da9190611cd0565b60405180910390f35b6100fd60048036038101906100f89190611ae6565b610686565b60405161010b929190611d04565b60405180910390f35b61012e60048036038101906101299190611ae6565b6106f6565b60405161013b9190611b70565b60405180910390f35b61015e60048036038101906101599190611bf9565b610741565b005b60006009826040516101729190611d9e565b908152602001604051809103902060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024490611e38565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a281156104f35760006008600085815260200190815260200160002060000180546102d990611e87565b80601f016020809104026020016040519081016040528092919081815260200182805461030590611e87565b80156103525780601f1061032757610100808354040283529160200191610352565b820191906000526020600020905b81548152906001019060200180831161033557829003601f168201915b505050505090506008600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a826040516103a09190611d9e565b908152602001604051809103902060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600a826040516104009190611d9e565b9081526020016040518091039020600101819055506008600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166008600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516104bd9190611d9e565b60405180910390207f84240358700ae9004ae0fee317e4909af848db92a33baf37f806d3ed077a2fa060405160405180910390a4505b600860008481526020019081526020016000206000808201600061051791906118a8565b6001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166009846040516105959190611d9e565b908152602001604051809103902060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061065557503373ffffffffffffffffffffffffffffffffffffffff1660098460405161060b9190611d9e565b908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156106735761066c838363fd68990a60e01b610b72565b9050610680565b61067d8383610d22565b90505b92915050565b600080600a836040516106999190611d9e565b908152602001604051809103902060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a846040516106db9190611d9e565b90815260200160405180910390206001015491509150915091565b60006009826040516107089190611d9e565b908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da90611e38565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a28115610af957600060086000858152602001908152602001600020600001805461086f90611e87565b80601f016020809104026020016040519081016040528092919081815260200182805461089b90611e87565b80156108e85780601f106108bd576101008083540402835291602001916108e8565b820191906000526020600020905b8154815290600101906020018083116108cb57829003601f168201915b505050505090506008600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166009826040516109369190611d9e565b908152602001604051809103902060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506008600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166009826040516109cc9190611d9e565b908152602001604051809103902060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506008600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166008600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610ac39190611d9e565b60405180910390207f1627d4dea7e3bf39ca9fcea57d0a5c17494a0d70918f9c47b96aa70da71cd0a460405160405180910390a4505b6008600084815260200190815260200160002060008082016000610b1d91906118a8565b6001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050505050565b600080610b826006543085610e35565b9050610bce6040518060400160405280600681526020017f646f6d61696e00000000000000000000000000000000000000000000000000008152508683610e669092919063ffffffff16565b610c386040518060400160405280600a81526020017f6472634164647265737300000000000000000000000000000000000000000000815250610c288673ffffffffffffffffffffffffffffffffffffffff166014610e99565b83610e669092919063ffffffff16565b6000610c46826007546110d5565b905085600860008381526020019081526020016000206000019081610c6b9190612064565b50846008600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336008600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080925050509392505050565b60008173ffffffffffffffffffffffffffffffffffffffff16600a84604051610d4b9190611d9e565b908152602001604051809103902060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e1a5762093a80600a84604051610dac9190611d9e565b908152602001604051809103902060010154610dc89190612165565b421115610de857610de1838363fd68990a60e01b610b72565b9050610e2f565b6040517f56a1446c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e2c8383634a0a23e460e01b610b72565b90505b92915050565b610e3d6118e8565b610e456118e8565b610e5c8585858461110c909392919063ffffffff16565b9150509392505050565b610e7d8284608001516111bc90919063ffffffff16565b610e948184608001516111bc90919063ffffffff16565b505050565b606060006002836002610eac9190612199565b610eb69190612165565b67ffffffffffffffff811115610ecf57610ece6119bb565b5b6040519080825280601f01601f191660200182016040528015610f015781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610f3957610f386121db565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610f9d57610f9c6121db565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610fdd9190612199565b610fe79190612165565b90505b6001811115611087577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611029576110286121db565b5b1a60f81b8282815181106110405761103f6121db565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806110809061220a565b9050610fea565b50600084146110cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c29061227f565b60405180910390fd5b8091505092915050565b6000611104600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846111e1565b905092915050565b6111146118e8565b61112485608001516101006112ad565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b6111c98260038351611317565b6111dc818361149c90919063ffffffff16565b505050565b60008060045490506001816111f69190612165565b6004819055506000634042994660e01b60008087600001513089604001518760018c608001516000015160405160240161123798979695949392919061232f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506112a2868386846114be565b925050509392505050565b6112b5611955565b60006020836112c491906123e3565b146112f0576020826112d691906123e3565b60206112e29190612414565b826112ed9190612165565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff161161134e576113488160058460ff16901b60ff16178461165390919063ffffffff16565b50611497565b60ff8167ffffffffffffffff16116113a45761137d601860058460ff16901b178461165390919063ffffffff16565b5061139e8167ffffffffffffffff166001856116739092919063ffffffff16565b50611496565b61ffff8167ffffffffffffffff16116113fb576113d4601960058460ff16901b178461165390919063ffffffff16565b506113f58167ffffffffffffffff166002856116739092919063ffffffff16565b50611495565b63ffffffff8167ffffffffffffffff16116114545761142d601a60058460ff16901b178461165390919063ffffffff16565b5061144e8167ffffffffffffffff166004856116739092919063ffffffff16565b50611494565b611471601b60058460ff16901b178461165390919063ffffffff16565b506114928167ffffffffffffffff166008856116739092919063ffffffff16565b505b5b5b5b505050565b6114a4611955565b6114b683846000015151848551611695565b905092915050565b600030846040516020016114d39291906124f7565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b81526004016115c993929190612523565b6020604051808303816000875af11580156115e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160c9190612576565b61164b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164290612615565b60405180910390fd5b949350505050565b61165b611955565b61166b8384600001515184611784565b905092915050565b61167b611955565b61168c8485600001515185856117da565b90509392505050565b61169d611955565b82518211156116ab57600080fd5b846020015182856116bc9190612165565b11156116f1576116f08560026116e1886020015188876116dc9190612165565b611868565b6116eb9190612199565b611884565b5b6000808651805187602083010193508088870111156117105787860182525b60208701925050505b6020841061175757805182526020826117329190612165565b91506020816117419190612165565b90506020846117509190612414565b9350611719565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b61178c611955565b836020015183106117b2576117b184600286602001516117ac9190612199565b611884565b5b835180516020858301018481538186036117cd576001820183525b5050508390509392505050565b6117e2611955565b846020015184836117f39190612165565b111561181b5761181a856002868561180b9190612165565b6118159190612199565b611884565b5b600060018361010061182d9190612768565b6118379190612414565b9050855183868201018583198251161781528151858801111561185a5784870182525b505085915050949350505050565b60008183111561187a5782905061187e565b8190505b92915050565b60008260000151905061189783836112ad565b506118a2838261149c565b50505050565b5080546118b490611e87565b6000825580601f106118c657506118e5565b601f0160209004906000526020600020908101906118e4919061196f565b5b50565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016000815260200161194f611955565b81525090565b604051806040016040528060608152602001600081525090565b5b80821115611988576000816000905550600101611970565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119f3826119aa565b810181811067ffffffffffffffff82111715611a1257611a116119bb565b5b80604052505050565b6000611a2561198c565b9050611a3182826119ea565b919050565b600067ffffffffffffffff821115611a5157611a506119bb565b5b611a5a826119aa565b9050602081019050919050565b82818337600083830152505050565b6000611a89611a8484611a36565b611a1b565b905082815260208101848484011115611aa557611aa46119a5565b5b611ab0848285611a67565b509392505050565b600082601f830112611acd57611acc6119a0565b5b8135611add848260208601611a76565b91505092915050565b600060208284031215611afc57611afb611996565b5b600082013567ffffffffffffffff811115611b1a57611b1961199b565b5b611b2684828501611ab8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b5a82611b2f565b9050919050565b611b6a81611b4f565b82525050565b6000602082019050611b856000830184611b61565b92915050565b6000819050919050565b611b9e81611b8b565b8114611ba957600080fd5b50565b600081359050611bbb81611b95565b92915050565b60008115159050919050565b611bd681611bc1565b8114611be157600080fd5b50565b600081359050611bf381611bcd565b92915050565b60008060408385031215611c1057611c0f611996565b5b6000611c1e85828601611bac565b9250506020611c2f85828601611be4565b9150509250929050565b611c4281611b4f565b8114611c4d57600080fd5b50565b600081359050611c5f81611c39565b92915050565b60008060408385031215611c7c57611c7b611996565b5b600083013567ffffffffffffffff811115611c9a57611c9961199b565b5b611ca685828601611ab8565b9250506020611cb785828601611c50565b9150509250929050565b611cca81611b8b565b82525050565b6000602082019050611ce56000830184611cc1565b92915050565b6000819050919050565b611cfe81611ceb565b82525050565b6000604082019050611d196000830185611b61565b611d266020830184611cf5565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015611d61578082015181840152602081019050611d46565b60008484015250505050565b6000611d7882611d2d565b611d828185611d38565b9350611d92818560208601611d43565b80840191505092915050565b6000611daa8284611d6d565b915081905092915050565b600082825260208201905092915050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b6000611e22602883611db5565b9150611e2d82611dc6565b604082019050919050565b60006020820190508181036000830152611e5181611e15565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e9f57607f821691505b602082108103611eb257611eb1611e58565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611f1a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611edd565b611f248683611edd565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611f61611f5c611f5784611ceb565b611f3c565b611ceb565b9050919050565b6000819050919050565b611f7b83611f46565b611f8f611f8782611f68565b848454611eea565b825550505050565b600090565b611fa4611f97565b611faf818484611f72565b505050565b5b81811015611fd357611fc8600082611f9c565b600181019050611fb5565b5050565b601f82111561201857611fe981611eb8565b611ff284611ecd565b81016020851015612001578190505b61201561200d85611ecd565b830182611fb4565b50505b505050565b600082821c905092915050565b600061203b6000198460080261201d565b1980831691505092915050565b6000612054838361202a565b9150826002028217905092915050565b61206d82611d2d565b67ffffffffffffffff811115612086576120856119bb565b5b6120908254611e87565b61209b828285611fd7565b600060209050601f8311600181146120ce57600084156120bc578287015190505b6120c68582612048565b86555061212e565b601f1984166120dc86611eb8565b60005b82811015612104578489015182556001820191506020850194506020810190506120df565b86831015612121578489015161211d601f89168261202a565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061217082611ceb565b915061217b83611ceb565b925082820190508082111561219357612192612136565b5b92915050565b60006121a482611ceb565b91506121af83611ceb565b92508282026121bd81611ceb565b915082820484148315176121d4576121d3612136565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061221582611ceb565b91506000820361222857612227612136565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612269602083611db5565b915061227482612233565b602082019050919050565b600060208201905081810360008301526122988161225c565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6122d48161229f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612301826122da565b61230b81856122e5565b935061231b818560208601611d43565b612324816119aa565b840191505092915050565b600061010082019050612345600083018b611b61565b612352602083018a611cf5565b61235f6040830189611cc1565b61236c6060830188611b61565b61237960808301876122cb565b61238660a0830186611cf5565b61239360c0830185611cf5565b81810360e08301526123a581846122f6565b90509998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006123ee82611ceb565b91506123f983611ceb565b925082612409576124086123b4565b5b828206905092915050565b600061241f82611ceb565b915061242a83611ceb565b925082820390508181111561244257612441612136565b5b92915050565b600061246361245e61245984611b2f565b611f3c565b611b2f565b9050919050565b600061247582612448565b9050919050565b60006124878261246a565b9050919050565b60008160601b9050919050565b60006124a68261248e565b9050919050565b60006124b88261249b565b9050919050565b6124d06124cb8261247c565b6124ad565b82525050565b6000819050919050565b6124f16124ec82611ceb565b6124d6565b82525050565b600061250382856124bf565b60148201915061251382846124e0565b6020820191508190509392505050565b60006060820190506125386000830186611b61565b6125456020830185611cf5565b818103604083015261255781846122f6565b9050949350505050565b60008151905061257081611bcd565b92915050565b60006020828403121561258c5761258b611996565b5b600061259a84828501612561565b91505092915050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b60006125ff602383611db5565b915061260a826125a3565b604082019050919050565b6000602082019050818103600083015261262e816125f2565b9050919050565b60008160011c9050919050565b6000808291508390505b600185111561268c5780860481111561266857612667612136565b5b60018516156126775780820291505b808102905061268585612635565b945061264c565b94509492505050565b6000826126a55760019050612761565b816126b35760009050612761565b81600181146126c957600281146126d357612702565b6001915050612761565b60ff8411156126e5576126e4612136565b5b8360020a9150848211156126fc576126fb612136565b5b50612761565b5060208310610133831016604e8410600b84101617156127375782820a90508381111561273257612731612136565b5b612761565b6127448484846001612642565b9250905081840481111561275b5761275a612136565b5b81810290505b9392505050565b600061277382611ceb565b915061277e83611ceb565b92506127ab7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612695565b90509291505056fea2646970667358221220f48561e5f7e3cacf88e7ea9639aa977d1ec4ec3ab51af555a90133fbb85f084c64736f6c63430008110033",
  "devdoc": {
    "details": "The Domain Contract Registry contract is used to register the dapp registry for a domain.",
    "kind": "dev",
    "methods": {
      "fulfill(bytes32,bool)": {
        "details": "Callback function for Chainlink request to register or update the dapp registry.",
        "params": {
          "_requestId": "The request id of the Chainlink request",
          "result": "The result of the Chainlink request"
        }
      },
      "fulfillRecordTransiton(bytes32,bool)": {
        "details": "Callback function for Chainlink request to record the transition.",
        "params": {
          "_requestId": "The request id of the Chainlink request",
          "result": "The result of the Chainlink request"
        }
      },
      "setDappRegistry(string,address)": {
        "details": "Set the dapp registry for a domain.",
        "params": {
          "_dappRegistry": "The address of the dapp registry",
          "_domain": "The domain name"
        },
        "returns": {
          "_0": "requestId The request id of the Chainlink request"
        }
      }
    },
    "title": "Domain Contract Registry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fulfill(bytes32,bool)": {
        "notice": "If the response by the chainlink Oracle is true, register or update the dapp registry."
      },
      "fulfillRecordTransiton(bytes32,bool)": {
        "notice": "If the response by the chainlink Oracle is true, record the transition."
      },
      "setDappRegistry(string,address)": {
        "notice": "If a domain is not registered add the dapp Registry.  If a domain is already registered, and admin wants to update the dapp registry,  update the registry.  If a domain is already registered, and new owner wants to update the dapp registry,  record transition."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)974"
      },
      {
        "astId": 321,
        "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1069"
      },
      {
        "astId": 327,
        "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1149"
      },
      {
        "astId": 330,
        "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3247,
        "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
        "label": "jobId",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 3249,
        "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
        "label": "fee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3254,
        "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
        "label": "requestToDomainMap",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Domain)3245_storage)"
      },
      {
        "astId": 3259,
        "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
        "label": "registryMap",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_struct(RegistryInfo)3233_storage)"
      },
      {
        "astId": 3264,
        "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
        "label": "recordTransitionMap",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_struct(RecordTransition)3238_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)974": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1069": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1149": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(Domain)3245_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DomainContractRegistry.Domain)",
        "numberOfBytes": "32",
        "value": "t_struct(Domain)3245_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(RecordTransition)3238_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct DomainContractRegistry.RecordTransition)",
        "numberOfBytes": "32",
        "value": "t_struct(RecordTransition)3238_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(RegistryInfo)3233_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct DomainContractRegistry.RegistryInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RegistryInfo)3233_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Domain)3245_storage": {
        "encoding": "inplace",
        "label": "struct DomainContractRegistry.Domain",
        "members": [
          {
            "astId": 3240,
            "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
            "label": "domain",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3242,
            "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
            "label": "dappRegistry",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3244,
            "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
            "label": "admin",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RecordTransition)3238_storage": {
        "encoding": "inplace",
        "label": "struct DomainContractRegistry.RecordTransition",
        "members": [
          {
            "astId": 3235,
            "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
            "label": "dappRegistry",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3237,
            "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RegistryInfo)3233_storage": {
        "encoding": "inplace",
        "label": "struct DomainContractRegistry.RegistryInfo",
        "members": [
          {
            "astId": 3230,
            "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
            "label": "dappRegistry",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3232,
            "contract": "contracts/DomainContractRegistry.sol:DomainContractRegistry",
            "label": "admin",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}